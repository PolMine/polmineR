% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/restore.R
\name{restore}
\alias{restore}
\title{Restore S4 textstat objects}
\usage{
restore(x)
}
\arguments{
\item{x}{An rds file to restore (filename).}
}
\description{
Using the reference semantics of \code{data.table} objects (i.e. inplace
modification) has great advantages for  memory efficiency. But there may be
unexpected behavior when reloading an S4 \code{textstat} object (including classes
inheriting from \code{textstat}) with a \code{data.table} in the \code{stat} slot. Use
\code{restore} to copy the \code{data.table} once to have a restored object that works
for inplace operations after saving / reloading it.
}
\examples{
# Before moving to examples, this is a brief technical dip into the problem
# solved by restore(): If we load the rds file the default way with
# readRDS(), the data.table in the slot 'stat' will have the pointer '0x0'
# and the data.table cannot be augmented without having been copied
# previously.

k <- kwic("REUTERS", query = "oil")
kwicfile <- tempfile(fileext = ".rds")
saveRDS(k, file = kwicfile)
problemprone <- readRDS(file = kwicfile)
problemprone@stat[, "newcol" := TRUE]
"newcol" \%in\% colnames(problemprone@stat) # is FALSE!

attr(problemprone@stat, ".internal.selfref")
identical(attr(problemprone@stat, ".internal.selfref"), new("externalptr"))

# Restore stored S4 object with copy of data.table in 'stat' slot
k <- kwic("REUTERS", query = "oil")
kwicfile <- tempfile(fileext = ".rds")
saveRDS(k, file = kwicfile)

k2 <- restore(kwicfile)
enrich(k2, s_attribute = "id")
"id" \%in\% colnames(k2) # is TRUE
}
\seealso{
The \code{\link{cp}} function addresses a related scenario.
}
